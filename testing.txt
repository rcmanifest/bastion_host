Testing the security of your bastion host with two Ethernet interfaces requires a structured approach, including both network security and host security assessments. Below are detailed instructions to help you perform security testing.

Prerequisites
Access to the bastion host.
Appropriate permission to perform penetration tests and security audits.
Familiarity with network and host security tools.
Ability to monitor and access logs on the bastion host.
Step 1: Network Configuration & Interface Setup Review
Before performing the security tests, verify the network interfaces' configurations and ensure they're set up securely.

Verify the IP Configuration of Both Interfaces:
Run ip addr or ifconfig to confirm the correct IP addresses, netmasks, and routes on both interfaces.
Ensure one interface is dedicated for the internal network, and the other is dedicated to the external network (i.e., internet-facing).
Ensure Proper Firewall Settings:
Use iptables (or equivalent) to verify that only necessary ports are open.
For example:
bash
Copy code
iptables -L -n -v
Ensure that ports like SSH (22), RDP (3389), and others required for the bastion’s purpose are open, but everything else is blocked.
Route Configuration:
Check routing tables to ensure proper isolation between the internal and external networks.
bash
Copy code
route -n
Ensure that no unnecessary routing paths are configured that could compromise network isolation.
Step 2: Network Penetration Testing
This phase focuses on testing the security of the network interfaces and how the bastion host interacts with both the internal and external networks.

Port Scanning: Use tools like nmap to scan both interfaces (external and internal) for open ports and services.

Run a scan on both interfaces:
bash
Copy code
nmap -p- <bastion_external_IP>
nmap -p- <bastion_internal_IP>
Look for unnecessary open ports or services. For example, if a port is open that shouldn’t be exposed, investigate and close it.
Firewall Evasion:

Test how the bastion reacts to common attack techniques like:
Packet fragmentation: Use nmap or hping3 with fragmentation to bypass firewall rules.
Source port manipulation: Test if the firewall can identify spoofed packets.
Vulnerability Scanning:

Use a tool like Nessus, OpenVAS, or Nmap scripts to scan for known vulnerabilities that might be present on the bastion host.
bash
Copy code
nmap --script=vuln <bastion_IP>
Check for outdated software, missing patches, and common vulnerabilities like open SSH or web server vulnerabilities.
External and Internal Network Segmentation:

Attempt to test whether the bastion host can access internal systems via the second interface. For example, try accessing internal resources or running network scans to ensure that the interfaces are properly segmented.
Use tools like Metasploit or Hydra to test for weak or exposed internal services.
Step 3: Host Security Testing
Next, focus on the security of the host itself by analyzing system configurations, permissions, and vulnerability management.

Check SSH Configuration:

Ensure that only key-based authentication is allowed and password-based authentication is disabled.
Check SSH config in /etc/ssh/sshd_config:
perl
Copy code
PasswordAuthentication no
PermitRootLogin no
Test SSH brute-force resilience by using Hydra or Medusa to test password strength.
Log Review:

Review system logs to check for suspicious activity.
/var/log/auth.log for SSH access attempts.
/var/log/syslog and /var/log/messages for general system activity.
Test for Weak/Default Credentials:

Check for weak or default credentials in service configurations.
Use a tool like Ncrack to test services like MySQL, SSH, or FTP.
Check for Sudo Access:

Verify that users do not have unnecessary sudo access.
Run sudo -l as a non-privileged user to check for unnecessary elevated permissions.
Operating System and Software Vulnerability Checks:

Ensure the host is up to date with patches.
bash
Copy code
sudo apt-get update && sudo apt-get upgrade
Run a vulnerability scanner like Lynis or OpenVAS to perform an in-depth scan for OS-level vulnerabilities.
bash
Copy code
lynis audit system
Check Installed Services:

List running services with ps aux or systemctl list-units --type=service.
Disable or remove unnecessary services. You can use:
bash
Copy code
systemctl disable <service_name>
Security Configurations:

Ensure SELinux (if applicable) or AppArmor is enabled and properly configured.
For SELinux: sestatus to check if SELinux is enforcing.
Check for file integrity using tools like AIDE (Advanced Intrusion Detection Environment).
Privilege Escalation Testing:

Test for privilege escalation vulnerabilities using tools like LinPEAS or Linux Exploit Suggester to identify misconfigurations or flaws that might allow privilege escalation.
Step 4: Simulating Attacks
Test the bastion host’s security by simulating real-world attacks.

Brute Force Attacks:

Run a password-cracking tool like Hydra or Medusa against the SSH service to check its resistance to brute force.
bash
Copy code
hydra -l <username> -P <password_list> ssh://<bastion_host_ip>
Denial of Service (DoS) Testing:

Simulate basic DoS attacks (floods) using tools like LOIC or hping3 to test how the bastion handles large numbers of requests.
Ensure it can handle DoS attempts without crashing.
Exploitation Testing:

Use a tool like Metasploit to try exploiting known vulnerabilities on the bastion host’s services. For example, test SSH or any exposed application for exploits.
Step 5: Post-Test Actions
Once your tests are completed:

Analyze Results:

Collect logs from the bastion host, firewall, and intrusion detection systems (IDS).
Analyze the results from vulnerability scanners and penetration tests.
Prioritize discovered vulnerabilities based on severity and exploitability.
Hardening the Bastion Host:

Apply patches to any identified vulnerabilities.
Tighten firewall rules, remove unnecessary services, and secure weak authentication mechanisms.
Consider implementing additional layers of security like fail2ban (to block brute-force attempts) and IDS/IPS (Intrusion Detection/Prevention Systems).
Review Access Control Policies:

Reevaluate and refine policies for user access to the bastion host.
Implement least privilege access for users and services.
Conduct Regular Security Audits:

Plan regular security audits and vulnerability scans.
Perform ongoing monitoring using tools like Nagios, Zabbix, or Prometheus.
Tools for Security Testing:
nmap: For network scanning.
Hydra/ Medusa: For brute-force testing.
Nessus, OpenVAS: For vulnerability scanning.
Lynis: For security auditing.
Metasploit: For exploitation testing.
fail2ban: For brute-force protection.
ps, top, systemctl: For analyzing running services.

